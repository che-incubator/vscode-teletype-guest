name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout repo
        uses: actions/checkout@v2

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.9
        with:
            versionSpec: '5.1.x'
      
      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9
        
      - name: print gitversion
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
          
      - name: remove node modules
        run: rm -rf node_modules
      - name: install dependencies
        run: npm i --no-optional
      - name: remove duplicates
        run: npm dedupe
      - name: latest version of dependencies
        run: npm up

      - name: update metadata in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: '${{github.workspace}}/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.semVer }}"
            = /displayName => "vscode-teletype"
            = /description => "VS Code Teletype extension for Creating CoEditing skeleton for Eclipse Che and Theia"
      
      - name: add version in CHANGELOG.md
        uses: cschleiden/replace-tokens@v1.0
        with:
          files: '${{github.workspace}}/CHANGELOG.md'
        env:
          VERSION: "${{ steps.gitversion.outputs.semVer }}"

      - name: compile and create vsix
        run: npm run package

      - name: print vsix path
        run: |
          echo "VSIX Path: ${{ env.vsix_path }}"
      - name: upload vsix as artifact
        uses: actions/upload-artifact@v2
        with:
          name: vscode-teletype-${{steps.gitversion.outputs.semVer}}.vsix
          path: ${{github.workspace}}/vscode-teletype-${{steps.gitversion.outputs.semVer}}.vsix
      - name: Set current date as env variable
        id: datetime
        run: echo "::set-output name=date::$(date +'%Y%m%d-%H%M')"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.datetime.outputs.date }}-${{ github.sha }}
          release_name: Release ${{ steps.datetime.outputs.date }} ${{ github.sha }} ${{ github.ref }} 
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{github.workspace}}/vscode-teletype-${{steps.gitversion.outputs.semVer}}.vsix
          asset_name: vscode-teletype-${{steps.gitversion.outputs.semVer}}.vsix
          asset_content_type: application/octet-stream

